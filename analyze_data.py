#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞
"""

from database import DatabaseManager
import json
from collections import Counter
import pandas as pd
from datetime import datetime

def analyze_survey_data():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞"""
    try:
        db = DatabaseManager()
        responses = db.get_all_responses()
        
        if not responses:
            print("üìä –î–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥—Å—É—Ç–Ω—ñ")
            return
        
        print(f"üìä –ê–Ω–∞–ª—ñ–∑ {len(responses)} –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π")
        print("=" * 50)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {len(responses)}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º
        dates = [datetime.fromisoformat(r['created_at'].replace('Z', '+00:00')).date() for r in responses]
        date_counts = Counter(dates)
        print(f"\nüìÖ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞ –¥–Ω—è–º–∏:")
        for date, count in sorted(date_counts.items()):
            print(f"  {date}: {count} –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        print(f"\n‚ùì –ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è:")
        
        for question_num in range(1, 11):
            question_key = f"q{question_num}"
            answers = []
            
            for response in responses:
                answers_data = json.loads(response['answers'])
                if question_key in answers_data:
                    answer = answers_data[question_key]
                    if isinstance(answer, list):
                        answers.extend(answer)
                    else:
                        answers.append(answer)
            
            if answers:
                answer_counts = Counter(answers)
                print(f"\n–ü–∏—Ç–∞–Ω–Ω—è {question_num}:")
                for answer, count in answer_counts.most_common():
                    percentage = (count / len(answers)) * 100
                    print(f"  {answer}: {count} ({percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        print(f"\nüìù –ê–Ω–∞–ª—ñ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å:")
        
        additional_fields = ['age', 'city', 'obstacles', 'suggestions']
        for field in additional_fields:
            values = []
            for response in responses:
                answers_data = json.loads(response['answers'])
                if field in answers_data and answers_data[field]:
                    values.append(answers_data[field])
            
            if values:
                print(f"\n{field.upper()}:")
                if field in ['age', 'city']:
                    # –î–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –≥–æ—Ä–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –∑–Ω–∞—á–µ–Ω–∏–π
                    value_counts = Counter(values)
                    for value, count in value_counts.most_common(5):
                        percentage = (count / len(values)) * 100
                        print(f"  {value}: {count} ({percentage:.1f}%)")
                else:
                    # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
                    print(f"  –ó–∞–ø–æ–≤–Ω–µ–Ω–æ: {len(values)} –∑ {len(responses)} ({len(values)/len(responses)*100:.1f}%)")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
        export_to_csv(responses)
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ: {str(e)}")

def export_to_csv(responses):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª"""
    try:
        data = []
        
        for response in responses:
            row = {
                'id': response['id'],
                'user_id': response['user_id'],
                'username': response['username'],
                'created_at': response['created_at']
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
            answers_data = json.loads(response['answers'])
            for key, value in answers_data.items():
                if isinstance(value, list):
                    row[key] = ', '.join(value)
                else:
                    row[key] = value
            
            data.append(row)
        
        df = pd.DataFrame(data)
        filename = f"survey_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        df.to_csv(filename, index=False, encoding='utf-8-sig')
        print(f"\nüíæ –î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ —Ñ–∞–π–ª: {filename}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ: {str(e)}")

def show_sample_responses():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤"""
    try:
        db = DatabaseManager()
        responses = db.get_all_responses()
        
        if not responses:
            print("üìä –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ")
            return
        
        print(f"\nüìã –ü—Ä–∏–∫–ª–∞–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:")
        print("=" * 50)
        
        for i, response in enumerate(responses[:3], 1):
            print(f"\n–í—ñ–¥–ø–æ–≤—ñ–¥—å #{i}:")
            print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {response['username']}")
            print(f"–î–∞—Ç–∞: {response['created_at']}")
            
            answers_data = json.loads(response['answers'])
            for key, value in answers_data.items():
                print(f"  {key}: {value}")
            
            if i < 3:
                print("-" * 30)
    
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

def main():
    print("üìä –ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è")
    print("=" * 50)
    
    while True:
        print("\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:")
        print("1. –ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö")
        print("2. –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π")
        print("3. –í–∏—Ö—ñ–¥")
        
        choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä (1-3): ").strip()
        
        if choice == "1":
            analyze_survey_data()
        elif choice == "2":
            show_sample_responses()
        elif choice == "3":
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

if __name__ == "__main__":
    main()
