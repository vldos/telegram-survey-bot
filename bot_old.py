import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from config import TELEGRAM_TOKEN, QUESTIONS, ADDITIONAL_QUESTIONS
from database import DatabaseManager
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SurveyBot:
    def __init__(self):
        self.db = DatabaseManager()
        self.user_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_answers = {}  # –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.waiting_for_other = {} # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è "–Ü–Ω—à–µ"
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        username = user.username or user.first_name
        
        welcome_text = f"""
–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã

–Ø –±–æ—Ç –¥–ª—è –∑–±–æ—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ø–æ—à—É–∫ —Ä–æ–∑–≤–∞–≥ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π.

üìã –û–ø–∏—Å—É–≤–∞–Ω–Ω—è –∑–∞–π–º–µ –ø—Ä–∏–±–ª–∏–∑–Ω–æ 5-10 —Ö–≤–∏–ª–∏–Ω.
üíæ –í—Å—ñ –≤–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±—É–¥—É—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–Ω–æ–Ω—ñ–º–Ω–æ.

–ì–æ—Ç–æ–≤—ñ –ø–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ!
        """
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –ü–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è", callback_data="start_survey")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if query.data == "start_survey":
            # –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
            self.user_states[user_id] = {"current_question": 0, "phase": "main"}
            self.user_answers[user_id] = {}
            await self.send_question(query, user_id)
        
        elif query.data.startswith("answer_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
            await self.handle_answer(query, user_id)
        elif query.data.startswith("finish_multi_"):
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            await self.handle_finish_multiple_choice(query, user_id)
    
    async def send_question(self, query, user_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        state = self.user_states[user_id]
        current_question = state["current_question"]
        
        if state["phase"] == "main":
            if current_question < len(QUESTIONS):
                question_data = QUESTIONS[current_question]
                await self.send_main_question(query, question_data, user_id)
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
                state["phase"] = "additional"
                state["current_question"] = 0
                await self.send_additional_question(query, user_id)
        
        elif state["phase"] == "additional":
            if current_question < len(ADDITIONAL_QUESTIONS):
                question_data = ADDITIONAL_QUESTIONS[current_question]
                await self.send_additional_question(query, user_id, question_data)
            else:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
                await self.finish_survey(query, user_id)
    
    async def send_main_question(self, query, question_data, user_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        question_text = f"‚ùì {question_data['question']}"
        
        if question_data['type'] == 'single_choice':
            keyboard = []
            for i, option in enumerate(question_data['options']):
                keyboard.append([InlineKeyboardButton(
                    option, 
                    callback_data=f"answer_{question_data['id']}_{i}"
                )])
        elif question_data['type'] == 'multiple_choice':
            keyboard = []
            for i, option in enumerate(question_data['options']):
                keyboard.append([InlineKeyboardButton(
                    f"‚òê {option}", 
                    callback_data=f"answer_{question_data['id']}_{i}_multi"
                )])
            keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data=f"finish_multi_{question_data['id']}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query.message:
            await query.message.edit_text(question_text, reply_markup=reply_markup)
        else:
            await query.message.reply_text(question_text, reply_markup=reply_markup)
    
    async def send_additional_question(self, query, user_id, question_data=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
        if not question_data:
            question_data = ADDITIONAL_QUESTIONS[self.user_states[user_id]["current_question"]]
        
        question_text = f"üìù {question_data['question']}"
        
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [[KeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        if query.message:
            await query.message.edit_text(question_text)
            await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–¥–ø–æ–≤—ñ–¥—å:", reply_markup=reply_markup)
        else:
            await query.message.reply_text(question_text)
            await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–¥–ø–æ–≤—ñ–¥—å:", reply_markup=reply_markup)
    
    async def handle_answer(self, query, user_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        data = query.data.split("_")
        
        if len(data) >= 3:
            question_id = int(data[1])
            answer_index = int(data[2])
            
            if len(data) > 3 and data[3] == "multi":
                # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
                await self.handle_multiple_choice(query, user_id, question_id, answer_index)
            else:
                # –û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
                await self.handle_single_choice(query, user_id, question_id, answer_index)
    
    async def handle_single_choice(self, query, user_id, question_id, answer_index):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä"""
        question_data = QUESTIONS[question_id - 1]  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ id –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
        selected_answer = question_data['options'][answer_index]
        
        print(f"DEBUG: handle_single_choice - question_id={question_id}, answer_index={answer_index}, selected_answer='{selected_answer}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç "–Ü–Ω—à–µ"
        if selected_answer == "–Ü–Ω—à–µ":
            print(f"DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ '–Ü–Ω—à–µ' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è "–Ü–Ω—à–µ"
            self.waiting_for_other[user_id] = {
                "question_id": question_id,
                "type": "single",
                "message_id": query.message.message_id
            }
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            keyboard = [[KeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            
            await query.message.edit_text(f"‚ùì {question_data['question']}\n\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è '–Ü–Ω—à–µ':")
            await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç:", reply_markup=reply_markup)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        if user_id not in self.user_answers:
            self.user_answers[user_id] = {}
        
        self.user_answers[user_id][f"q{question_id}"] = selected_answer
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        self.user_states[user_id]["current_question"] += 1
        await self.send_question(query, user_id)
    
    async def handle_multiple_choice(self, query, user_id, question_id, answer_index):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"""
        question_data = QUESTIONS[question_id - 1]
        selected_answer = question_data['options'][answer_index]
        
        print(f"DEBUG: handle_multiple_choice - question_id={question_id}, answer_index={answer_index}, selected_answer='{selected_answer}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç "–Ü–Ω—à–µ"
        if selected_answer == "–Ü–Ω—à–µ":
            print(f"DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ '–Ü–Ω—à–µ' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è "–Ü–Ω—à–µ"
            self.waiting_for_other[user_id] = {
                "question_id": question_id,
                "type": "multiple",
                "message_id": query.message.message_id
            }
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            keyboard = [[KeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            
            await query.message.edit_text(f"‚ùì {question_data['question']}\n\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è '–Ü–Ω—à–µ':")
            await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç:", reply_markup=reply_markup)
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        if user_id not in self.user_answers:
            self.user_answers[user_id] = {}
        
        if f"q{question_id}" not in self.user_answers[user_id]:
            self.user_answers[user_id][f"q{question_id}"] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç
        if selected_answer in self.user_answers[user_id][f"q{question_id}"]:
            self.user_answers[user_id][f"q{question_id}"].remove(selected_answer)
        else:
            self.user_answers[user_id][f"q{question_id}"].append(selected_answer)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await self.update_multiple_choice_keyboard(query, question_data, user_id, question_id)
    
    async def handle_finish_multiple_choice(self, query, user_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
        data = query.data.split("_")
        question_id = int(data[2])  # finish_multi_2 -> question_id = 2
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        self.user_states[user_id]["current_question"] += 1
        await self.send_question(query, user_id)
    
    async def update_multiple_choice_keyboard(self, query, question_data, user_id, question_id):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
        keyboard = []
        current_answers = self.user_answers[user_id].get(f"q{question_id}", [])
        
        for i, option in enumerate(question_data['options']):
            if option in current_answers:
                keyboard.append([InlineKeyboardButton(
                    f"‚òë {option}", 
                    callback_data=f"answer_{question_id}_{i}_multi"
                )])
            else:
                keyboard.append([InlineKeyboardButton(
                    f"‚òê {option}", 
                    callback_data=f"answer_{question_id}_{i}_multi"
                )])
        
        keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data=f"finish_multi_{question_id}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_reply_markup(reply_markup=reply_markup)
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if user_id not in self.user_states:
            await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è.")
            return
        
        state = self.user_states[user_id]
        
        if state["phase"] == "additional":
            current_question = state["current_question"]
            question_data = ADDITIONAL_QUESTIONS[current_question]
            
            if text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å
                pass
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
                if user_id not in self.user_answers:
                    self.user_answers[user_id] = {}
                
                self.user_answers[user_id][question_data['id']] = text
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            state["current_question"] += 1
            
            if state["current_question"] < len(ADDITIONAL_QUESTIONS):
                next_question = ADDITIONAL_QUESTIONS[state["current_question"]]
                await self.send_additional_question_text(update, next_question)
            else:
                await self.finish_survey_text(update, user_id)
    
    async def send_additional_question_text(self, update, question_data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º"""
        question_text = f"üìù {question_data['question']}"
        keyboard = [[KeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await update.message.reply_text(question_text)
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–¥–ø–æ–≤—ñ–¥—å:", reply_markup=reply_markup)
    
    async def finish_survey(self, query, user_id):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å"""
        await self.save_and_finish(query.message, user_id)
    
    async def finish_survey_text(self, update, user_id):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await self.save_and_finish(update.message, user_id)
    
    async def save_and_finish(self, message, user_id):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å"""
        user = message.from_user
        username = user.username or user.first_name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success, result_message = self.db.save_survey_response(
            user_id, username, self.user_answers[user_id]
        )
        
        if success:
            finish_text = """
üéâ –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å –≤ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ!

–í–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ. –¶–µ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫—Ä–∞—â–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –ø–æ—à—É–∫—É —Ä–æ–∑–≤–∞–≥ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π.

–Ø–∫—â–æ —É –≤–∞—Å —î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —ñ–¥–µ—ó –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, –≤–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º!
            """
        else:
            finish_text = f"""
‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {result_message}

–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
            """
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.user_states:
            del self.user_states[user_id]
        if user_id in self.user_answers:
            del self.user_answers[user_id]
        
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [[KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–∞")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await message.reply_text(finish_text, reply_markup=reply_markup)
    
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞
        responses = self.db.get_all_responses()
        
        stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:

–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {len(responses)}

–û—Å—Ç–∞–Ω–Ω—ñ 5 –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:
        """
        
        for i, response in enumerate(responses[-5:], 1):
            stats_text += f"\n{i}. {response.get('username', '–ê–Ω–æ–Ω—ñ–º')} - {response.get('created_at', '–ù–µ–≤—ñ–¥–æ–º–æ')}"
        
        await update.message.reply_text(stats_text)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("stats", self.stats))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

if __name__ == "__main__":
    bot = SurveyBot()
    bot.run()
