#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è Railway
"""

import os
import asyncio
import sys
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
import time
import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
QUESTIONS = [
    {
        "id": 1,
        "question": "–î–µ –≤–∏ —á–∞—Å—Ç—ñ—à–µ —à—É–∫–∞—î—Ç–µ, —á–∏–º –∑–∞–π–Ω—è—Ç–∏—Å—å —É –≤—ñ–ª—å–Ω–∏–π —á–∞—Å?",
        "type": "single_choice",
        "options": [
            "–£ –ø–æ–¥–æ—Ä–æ–∂–∞—Ö",
            "–£ —Å–≤–æ—î–º—É –º—ñ—Å—Ç—ñ", 
            "–Ü —Ç–∞–º, —ñ —Ç–∞–º",
            "–Ø –Ω–µ —à—É–∫–∞—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ"
        ]
    },
    {
        "id": 2,
        "question": "–Ø–∫ –≤–∏ –∑–∞–∑–≤–∏—á–∞–π –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ —Ä–æ–∑–≤–∞–≥–∏? (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤)",
        "type": "multiple_choice",
        "options": [
            "–ß–µ—Ä–µ–∑ Google",
            "–ß–µ—Ä–µ–∑ –∫–∞—Ä—Ç–∏ (Google Maps, 2–ì–Ü–° —Ç–æ—â–æ)",
            "–ß–µ—Ä–µ–∑ –¥—Ä—É–∑—ñ–≤/–∑–Ω–∞–π–æ–º–∏—Ö",
            "–ß–µ—Ä–µ–∑ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ (Instagram, Telegram-–∫–∞–Ω–∞–ª–∏ —Ç–æ—â–æ)",
            "–ß–µ—Ä–µ–∑ —Å–∞–π—Ç–∏-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∏ –∞–±–æ —Å–µ—Ä–≤—ñ—Å–∏",
            "–Ø –Ω–µ —à—É–∫–∞—é ‚Äî –≤—Å–µ –≤–∏—Ö–æ–¥–∏—Ç—å —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ"
        ]
    },
    {
        "id": 3,
        "question": "–ë—É–≤–∞—î, —â–æ –≤–∏ —Ç–æ—á–Ω–æ –∑–Ω–∞—î—Ç–µ, —á–∏–º —Ö–æ—á–µ—Ç–µ –∑–∞–π–Ω—è—Ç–∏—Å—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ–∫–∞—Ç–∞—Ç–∏—Å—å –Ω–∞ –∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª–∞—Ö, –ø–æ—ó—Ö–∞—Ç–∏ –Ω–∞ —Ä–∏–±–æ–ª–æ–≤–ª—é), –∞–ª–µ –Ω–µ –∑–Ω–∞—î—Ç–µ, –¥–µ —Ü–µ –∑–Ω–∞–π—Ç–∏?",
        "type": "single_choice",
        "options": [
            "–¢–∞–∫, —á–∞—Å—Ç–æ",
            "–Ü–Ω–æ–¥—ñ",
            "–ù—ñ, –ª–µ–≥–∫–æ –∑–Ω–∞—Ö–æ–¥–∂—É",
            "–Ø –Ω–µ —à—É–∫–∞—é —Ç–∞–∫—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"
        ]
    },
    {
        "id": 4,
        "question": "–Ø–∫—â–æ –≤–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç–µ \"—â–æ—Å—å –∞–∫—Ç–∏–≤–Ω–µ\" –∞–±–æ \"–≤—ñ–¥–ø–æ—á–∏—Ç–∏\", –∞–ª–µ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —ñ–¥–µ—ó ‚Äî —è–∫ –≤–∏ —à—É–∫–∞—î—Ç–µ –≤–∞—Ä—ñ–∞–Ω—Ç–∏?",
        "type": "single_choice",
        "options": [
            "–ü—Ä–æ—Å—Ç–æ –≥—É–≥–ª—é \"—â–æ —Ä–æ–±–∏—Ç–∏ –≤ [–º—ñ—Å—Ç—ñ]\"",
            "–î–∏–≤–ª—é—Å—å —É —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö",
            "–ü–∏—Ç–∞—é —É –¥—Ä—É–∑—ñ–≤",
            "–ù–µ —à—É–∫–∞—é ‚Äî —è–∫—â–æ –Ω–µ –∑–Ω–∞—é, —á–æ–≥–æ —Ö–æ—á—É, –∑–Ω–∞—á–∏—Ç—å —ñ –Ω–µ —Ç—Ä–µ–±–∞",
            "–Ü–Ω—à–µ"
        ]
    },
    {
        "id": 5,
        "question": "–ë—É–ª–æ –± –≤–∞–º –∑—Ä—É—á–Ω–æ –±–∞—á–∏—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–≤–∞–≥–∏ –ø–æ—Ä—É—á –Ω–∞ –∫–∞—Ä—Ç—ñ, –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –∑–∞ —Ç–∏–ø–æ–º, —á–∞—Å–æ–º, –±—é–¥–∂–µ—Ç–æ–º —Ç–æ—â–æ?",
        "type": "single_choice",
        "options": [
            "–¢–∞–∫, —Ü–µ –∑—Ä—É—á–Ω–æ —ñ —Ü—ñ–∫–∞–≤–æ",
            "–ú–æ–∂–ª–∏–≤–æ, —è–∫—â–æ –≤—Å–µ –±—É–¥–µ –ø—Ä–æ—Å—Ç–æ",
            "–ù–µ –¥—É–º–∞—é, —â–æ —Ü–µ –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ"
        ]
    }
]

ADDITIONAL_QUESTIONS = [
    {
        "id": "age",
        "question": "–í—ñ–∫:",
        "type": "text"
    },
    {
        "id": "city",
        "question": "–ú—ñ—Å—Ç–æ:",
        "type": "text"
    },
    {
        "id": "suggestions",
        "question": "–ú–∞—î—Ç–µ —ñ–¥–µ—ó –∞–±–æ –ø–æ–±–∞–∂–∞–Ω–Ω—è –¥–æ —Ç–∞–∫–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É?",
        "type": "text"
    }
]

class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        print(f"üè• GET –∑–∞–ø—Ä–æ—Å: {self.path}")
        print(f"üè• –û—Ç: {self.client_address[0]}")
        print(f"üè• User-Agent: {self.headers.get('User-Agent', 'Unknown')}")
        
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        
        response = "Telegram Bot is running! ü§ñ"
        self.wfile.write(response.encode())
    
    def log_message(self, format, *args):
        print(f"üìù {format % args}")

def run_health_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check"""
    try:
        port = int(os.getenv('PORT', 8080))
        print(f"üîß –ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        print(f"üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for key, value in os.environ.items():
            if key in ['PORT', 'RAILWAY_ENVIRONMENT', 'RAILWAY_PROJECT_ID', 'TELEGRAM_TOKEN']:
                print(f"   {key}={value[:10] + '...' if len(value) > 10 else value}")
        
        server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
        print(f"üöÄ Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        print("üì° –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        server.serve_forever()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ health check —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()

class FullTelegramBot:
    def __init__(self, token):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}"
        self.offset = 0
        self.user_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_answers = {}  # –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    def send_message(self, chat_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML"
            }
            if reply_markup:
                data["reply_markup"] = reply_markup
            
            response = requests.post(url, json=data)
            if response.status_code == 200:
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def create_keyboard(self, options, question_type="single_choice"):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤"""
        keyboard = []
        
        if question_type == "single_choice":
            for i, option in enumerate(options, 1):
                keyboard.append([{"text": f"{i}. {option}"}])
        elif question_type == "multiple_choice":
            for i, option in enumerate(options, 1):
                keyboard.append([{"text": f"{i}. {option}"}])
            keyboard.append([{"text": "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä"}])
        
        return {
            "keyboard": keyboard,
            "resize_keyboard": True,
            "one_time_keyboard": True
        }
    
    def get_updates(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        try:
            url = f"{self.base_url}/getUpdates"
            params = {
                "offset": self.offset,
                "timeout": 30
            }
            response = requests.get(url, params=params)
            if response.status_code == 200:
                data = response.json()
                if data.get("ok") and data.get("result"):
                    for update in data["result"]:
                        self.handle_update(update)
                        self.offset = update["update_id"] + 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
    
    def handle_update(self, update):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram"""
        if "message" in update:
            message = update["message"]
            chat_id = message["chat"]["id"]
            text = message.get("text", "")
            
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")
            
            if text == "/start":
                self.start_survey(chat_id)
            elif text == "/stats":
                self.show_stats(chat_id)
            else:
                self.handle_answer(chat_id, text)
    
    def start_survey(self, chat_id):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å"""
        self.user_states[chat_id] = {"current_question": 0, "phase": "main"}
        self.user_answers[chat_id] = {}
        
        welcome_text = """
ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–±–æ—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ø–æ—à—É–∫ —Ä–æ–∑–≤–∞–≥ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π.

üìã –û–ø–∏—Å—É–≤–∞–Ω–Ω—è –∑–∞–π–º–µ –ø—Ä–∏–±–ª–∏–∑–Ω–æ 5-10 —Ö–≤–∏–ª–∏–Ω.
üíæ –í—Å—ñ –≤–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±—É–¥—É—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–Ω–æ–Ω—ñ–º–Ω–æ.

–ì–æ—Ç–æ–≤—ñ –ø–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ!
        """
        
        keyboard = {
            "keyboard": [[{"text": "üöÄ –ü–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è"}]],
            "resize_keyboard": True
        }
        
        self.send_message(chat_id, welcome_text, keyboard)
    
    def handle_answer(self, chat_id, text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if chat_id not in self.user_states:
            self.send_message(chat_id, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è.")
            return
        
        state = self.user_states[chat_id]
        
        if text == "üöÄ –ü–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è":
            self.send_question(chat_id)
        elif text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä":
            self.finish_multiple_choice(chat_id)
        elif text.startswith("1.") or text.startswith("2.") or text.startswith("3.") or text.startswith("4.") or text.startswith("5.") or text.startswith("6."):
            self.process_answer(chat_id, text)
        elif state["phase"] == "additional":
            self.process_text_answer(chat_id, text)
        else:
            self.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
    
    def send_question(self, chat_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å"""
        state = self.user_states[chat_id]
        current_question = state["current_question"]
        
        if state["phase"] == "main":
            if current_question < len(QUESTIONS):
                question_data = QUESTIONS[current_question]
                question_text = f"‚ùì {question_data['question']}"
                
                keyboard = self.create_keyboard(question_data['options'], question_data['type'])
                self.send_message(chat_id, question_text, keyboard)
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
                state["phase"] = "additional"
                state["current_question"] = 0
                self.send_additional_question(chat_id)
        elif state["phase"] == "additional":
            if current_question < len(ADDITIONAL_QUESTIONS):
                self.send_additional_question(chat_id)
            else:
                self.finish_survey(chat_id)
    
    def send_additional_question(self, chat_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
        state = self.user_states[chat_id]
        current_question = state["current_question"]
        question_data = ADDITIONAL_QUESTIONS[current_question]
        
        question_text = f"üìù {question_data['question']}"
        keyboard = {
            "keyboard": [[{"text": "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"}]],
            "resize_keyboard": True
        }
        
        self.send_message(chat_id, question_text, keyboard)
    
    def process_answer(self, chat_id, text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        state = self.user_states[chat_id]
        current_question = state["current_question"]
        
        if state["phase"] == "main":
            question_data = QUESTIONS[current_question]
            answer_index = int(text.split(".")[0]) - 1
            
            if answer_index < len(question_data['options']):
                selected_answer = question_data['options'][answer_index]
                
                if question_data['type'] == 'single_choice':
                    self.user_answers[chat_id][f"q{question_data['id']}"] = selected_answer
                    state["current_question"] += 1
                    self.send_question(chat_id)
                elif question_data['type'] == 'multiple_choice':
                    if f"q{question_data['id']}" not in self.user_answers[chat_id]:
                        self.user_answers[chat_id][f"q{question_data['id']}"] = []
                    
                    if selected_answer in self.user_answers[chat_id][f"q{question_data['id']}"]:
                        self.user_answers[chat_id][f"q{question_data['id']}"].remove(selected_answer)
                    else:
                        self.user_answers[chat_id][f"q{question_data['id']}"].append(selected_answer)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    self.update_multiple_choice_keyboard(chat_id, question_data)
    
    def update_multiple_choice_keyboard(self, chat_id, question_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
        current_answers = self.user_answers[chat_id].get(f"q{question_data['id']}", [])
        
        keyboard = []
        for i, option in enumerate(question_data['options'], 1):
            if option in current_answers:
                keyboard.append([{"text": f"‚òë {i}. {option}"}])
            else:
                keyboard.append([{"text": f"‚òê {i}. {option}"}])
        
        keyboard.append([{"text": "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä"}])
        
        reply_markup = {
            "keyboard": keyboard,
            "resize_keyboard": True
        }
        
        question_text = f"‚ùì {question_data['question']}"
        self.send_message(chat_id, question_text, reply_markup)
    
    def finish_multiple_choice(self, chat_id):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"""
        state = self.user_states[chat_id]
        state["current_question"] += 1
        self.send_question(chat_id)
    
    def process_text_answer(self, chat_id, text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"""
        state = self.user_states[chat_id]
        current_question = state["current_question"]
        question_data = ADDITIONAL_QUESTIONS[current_question]
        
        if text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
            pass
        else:
            self.user_answers[chat_id][question_data['id']] = text
        
        state["current_question"] += 1
        self.send_question(chat_id)
    
    def finish_survey(self, chat_id):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å"""
        finish_text = """
üéâ –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å –≤ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ!

–í–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ. –¶–µ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫—Ä–∞—â–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –ø–æ—à—É–∫—É —Ä–æ–∑–≤–∞–≥ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π.

–ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–∞ Railway! üöÇ
        """
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if chat_id in self.user_states:
            del self.user_states[chat_id]
        if chat_id in self.user_answers:
            del self.user_answers[chat_id]
        
        keyboard = {
            "keyboard": [[{"text": "üè† –ì–æ–ª–æ–≤–Ω–∞"}]],
            "resize_keyboard": True
        }
        
        self.send_message(chat_id, finish_text, keyboard)
        print(f"üìä –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    def show_stats(self, chat_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:

–ê–∫—Ç–∏–≤–Ω–∏—Ö –æ–ø—Ä–æ—Å–æ–≤: {len(self.user_states)}
–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤: {len([k for k in self.user_answers.keys() if k not in self.user_states])}

–ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–∞ Railway! üöÇ
        """
        self.send_message(chat_id, stats_text)

def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞"""
    token = os.getenv('TELEGRAM_TOKEN')
    if not token:
        print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    bot = FullTelegramBot(token)
    print("ü§ñ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    try:
        while True:
            bot.get_updates()
            time.sleep(1)
    except KeyboardInterrupt:
        print("üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ Telegram –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    telegram_token = os.getenv('TELEGRAM_TOKEN')
    if not telegram_token:
        print("‚ö†Ô∏è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ health check —Å–µ—Ä–≤–µ—Ä")
        run_health_server()
        return
    
    print("‚úÖ TELEGRAM_TOKEN –Ω–∞–π–¥–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º health check —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    health_thread = threading.Thread(target=run_health_server, daemon=True)
    health_thread.start()
    
    print("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_telegram_bot, daemon=True)
    bot_thread.start()
    
    print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

if __name__ == "__main__":
    main()
